---
# yamllint disable rule:line-length
###############################################################################
# Whisparr Config
###############################################################################
# Whisparr is installed from source. Create systemd service and reload daemons,
# create required directories, certificates, set config, and start service.
# Service may not exist if first install.
#
# Reference:
# * https://github.com/Servarr/Wiki/blob/master/servarr/servarr-install-script.sh

- name: 'Config | set {{ _whisparr_srv_config_dir.raw }}'
  ansible.builtin.file:
    path: '{{ _whisparr_srv_config_dir.raw }}'
    owner: '{{ _whisparr_srv_user.raw }}'
    group: '{{ _whisparr_srv_group.raw }}'
    mode: '0775'
    recurse: '{{ _whisparr_srv_permissions_recursive_enable.raw }}'
    state: 'directory'
  changed_when: false  # https://github.com/ansible/ansible/issues/32636
  become:
    '{{ true if _whisparr_srv_user_data_manage_enable.raw else omit }}'
  become_user: '{{
      _whisparr_srv_user.raw
      if _whisparr_srv_user_data_manage_enable.raw else
      omit
    }}'

- name: 'Config | set {{ _whisparr_cfg_ssl_cert_path.parsed }}'
  when: _whisparr_cfg_enable_ssl.raw
  ansible.builtin.copy:
    src: '{{ _whisparr_cfg_ssl_cert_path.raw }}'
    dest: '{{ _whisparr_cfg_ssl_cert_path.parsed }}'
    owner: '{{ _whisparr_srv_user.parsed }}'
    group: '{{ _whisparr_srv_group.parsed }}'
    mode: '0640'
    force: true

- name: 'Config | remove {{ _whisparr_cfg_ssl_cert_path.role }}'
  when: not _whisparr_cfg_enable_ssl.raw
  ansible.builtin.file:
    dest: '{{ _whisparr_cfg_ssl_cert_path.role }}'
    state: 'absent'

- name: 'Config | set {{ _whisparr_cfg_update_script_path.parsed }}'
  when: not _whisparr_cfg_update_mechanism.raw
  ansible.builtin.copy:
    src: '{{ _whisparr_cfg_update_script_path.raw }}'
    dest: '{{ _whisparr_cfg_update_script_path.parsed }}'
    owner: '{{ _whisparr_srv_user.parsed }}'
    group: '{{ _whisparr_srv_group.parsed }}'
    mode: '0750'
    force: true

- name: 'Config | remove {{ _whisparr_cfg_update_script_path.role }}'
  when: _whisparr_cfg_update_mechanism.raw
  ansible.builtin.file:
    dest: '{{ _whisparr_cfg_update_script_path.role }}'
    state: 'absent'

- name: 'Config | set media root folders'
  ansible.builtin.file:
    path: '{{ item }}'
    owner: '{{ _whisparr_srv_user.parsed }}'
    group: '{{ _whisparr_srv_group.parsed }}'
    mode: '{{ _whisparr_srv_media_perms_folder.raw }}'
    recurse: '{{ _whisparr_srv_permissions_recursive_enable.raw }}'
    state: 'directory'
  changed_when: false  # https://github.com/ansible/ansible/issues/32636
  become:
    '{{ true if _whisparr_srv_user_data_manage_enable.raw else omit }}'
  become_user: '{{
      _whisparr_srv_user.raw
      if _whisparr_srv_user_data_manage_enable.raw else
      omit
    }}'
  loop: '{{ _whisparr_srv_media_root_folders.raw }}'

- name: 'Config | set media root files'
  when: _whisparr_srv_media_set_perms_file_enable.raw
  ansible.builtin.shell: >-
    find '{{ item }}'
    -type f
    -exec chmod {{ _whisparr_srv_media_perms_file.raw }} {};
      chown {{ _whisparr_srv_user.parsed }}:{{ _whisparr_srv_group.parsed }} {} \;
  changed_when: false  # https://github.com/ansible/ansible/issues/32636
  become:
    '{{ true if _whisparr_srv_user_data_manage_enable.raw else omit }}'
  become_user: '{{
      _whisparr_srv_user.raw
      if _whisparr_srv_user_data_manage_enable.raw else
      omit
    }}'
  loop: '{{ _whisparr_srv_media_root_folders.raw }}'

# Writing the configuration back requires to_json, ansible.utils.to_xml, and
# xmltodict python3 package installed on both controller and node. Just use a
# template instead with datatype rendering hints.
- name: 'Config | set Whisparr configuration'
  ansible.builtin.template:
    src: 'config.xml.j2'
    dest: '{{ _whisparr_srv_config_dir.parsed ~ "config.xml" }}'
    owner: '{{ _whisparr_srv_user.parsed }}'
    group: '{{ _whisparr_srv_group.parsed }}'
    mode: '0600'

- name: 'Config | Whisparr service'
  ansible.builtin.include_role:
    name: 'r_pufky.deb.systemd'
  vars:
    systemd_daemon_reload_enable: true
    systemd_services:
      - name: 'whisparr'
        state: 'present'
        drop_in: false
        unit:
          description: 'Whisparr Daemon'
          after:
            - 'syslog.target'
            - 'network.target'
        service:
          type: 'simple'
          exec_start:
            - >-
              {{ whisparr_role_repo_extract_symlink ~ "/Whisparr" }}
              -nobrowser
              -data={{ _whisparr_srv_config_dir.raw }}
          timeout_stop_sec: 20
          restart: 'always'  # Always restart for periodic service restarts.
          runtime_max_sec: '{{
              "1d"
              if _whisparr_srv_restart_daily_enable.raw else
              "infinity"
            }}'
        exec:
          user: '{{ _whisparr_srv_user.raw }}'
          group: '{{ _whisparr_srv_group.raw }}'
          u_mask: '{{ _whisparr_srv_u_mask.raw }}'
        kill:
          kill_mode: 'process'
        install:
          wanted_by:
            - 'multi-user.target'
